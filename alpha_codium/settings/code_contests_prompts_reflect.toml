[code_contests_prompt_reflect]
temperature = 0.2
system= """\
"""
user="""You given a code contest problem:

problem name: '{{name}}'


problem description:
'
{{description}}
'


Your goal is reflect on the problem, and describe it in your own words.
You should also present possible solutions to the problem. Avoid simple brute force solutions.
Make sure to fully address the problem goals, rules and constraints.

The output must be a YAML object equivalent to type $ProblemReflection, according to the following Pydantic definitions:
'
class Solution(BaseModel):
    name: str = Field(description="The name of the solution")
    content: str = Field(description="A description of the solution")
    labels: List[str] = Field(description="A list of labels for the solution. For example (partial list): binary search, dynamic programming, trees, combinatorics, dfs, bfs, graphs, constructive algorithms, math, data structures, geometry, number theory, two pointers ...")
    complexity: str = Field(description="The complexity of the solution")


class ProblemReflection(BaseModel):
    self_description: str = Field(description="Describe the problem in your own words, in bullet points. Address the problem goal, inputs, outputs, rules, constraints, and other relevant details.")
    possible_solutions: List[Solution] = Field(min_items={{ min_num_of_solutions }}, max_items=3, description="A list of possible solutions to the problem. Make sure each solution has a reasonable runtime - less than 3 second on a modern computer, given the problem constraints for large inputs.")
'

Example YAML output:
```yaml
self_description:
- ...
- ...
possible_solutions:
- name: |
    ...
  content: |
    ...
  labels:
  - ...
  - ...
  complexity: |
    ...
 ```


Answer:
```yaml
"""