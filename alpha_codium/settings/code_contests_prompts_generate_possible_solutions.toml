[code_contests_prompt_generate_possible_solutions]
temperature = 0.2
system= """\
Pay attention to small details and nuances in the problem description.
"""
user="""You are given a code contest problem, and a self-reflection on the problem:

problem description:
=====
{{description}}
=====


self-reflection on the problem:
============
{{ self_reflection|trim }}
============


Your goal is to present possible solutions to the problem.

guidelines:
- Make sure that each solution can fully address the problem goals, constraints, examples and notes.
- Each solution must have reasonable runtime and memory complexity - less than 3 seconds on a modern computer, given the problem constraints for large inputs.
- Double-check the solutions. Each possible solution must be able to generalize to additional test cases, not just the ones provided in the problem description.

The output must be a YAML object equivalent to type $ProblemSolutions, according to the following Pydantic definitions:
======
class Solution(BaseModel):
    name: str = Field(description="The name of the solution")
    content: str = Field(description="A description of the solution")
    why_it_works: str = Field(description="Why this solution is correct. Be specific and detailed regarding the problem rules and goals.")
    labels: List[str] = Field(description="A list of labels for the solution. For example (partial list): binary search, dynamic programming, trees, combinatorics, dfs, bfs, graphs, greedy, math, data structures, geometry, number theory, two pointers, simulation, brute force, probabilities, ...")
    complexity: str = Field(description="The complexity of the solution")


class $ProblemSolutions(BaseModel):
    possible_solutions: List[Solution] = Field(min_items=3, max_items=3, description="A list of possible solutions to the problem. Make sure each solution fully addresses the problem rules and goals, and has a reasonable runtime - less than 3 second on a modern computer, given the problem constraints for large inputs.")
======


Example YAML output:
```yaml
possible_solutions:
- name: |
    ...
  content: |
    ...
  why_it_works: |
    ...
  labels:
  - ...
  - ...
  complexity: |
    ...
 ```

Answer:
```yaml
"""