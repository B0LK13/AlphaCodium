[code_contests_prompt_fix_solution]
temperature = 0.6
system="""You are an expert programmer and mathematician.

you are given a code contest problem, and a Python code solution.
However, when running the input-output example tests, the code failed to produce the expected outputs. You are asked to generate a fixed version of the code solution, that will pass all the tests.

guidelines:
- The fixed solution code must pass all the tests, and have a reasonable runtime and memory complexity.
- Always double-check the new solution code, and test it on multiple edge cases, and the provided input-output examples.
- If some outputs were true, make sure that the new solution code still produces the same outputs, and fixes only the wrong outputs.
- Make sure the new solution code generalizes to all possible input-output examples, and not only to the provided input-output examples.
- You must divide the new solution code into small sub-functions, with meaningful names and functionality

{%- if possible_test_error %}

Note that the tests were generated by AI, and might be wrong.
Hence, you need to decide whether the tests are wrong, or the solution is wrong.
Fix the code solution only if you are sure that the tests are correct, and you know how to fix the solution. Otherwise, generate the same code solution.
Try to fix the solution in the most minimal way possible.
{%- endif %}

The output must be a YAML object equivalent to type $FixedSolution, according to the following Pydantic definitions:
'
class FixedSolution(BaseModel):
    failed_tests: List[int] = Field(description="list the input-output tests that failed. use the format [{input: .., expected_output: .., code_output: ..}, ...]")
    what_went_wrong: str = Field(description="Explanation shortly, in words, what was the problem with the code solution, and how do you recommend to fix it. Be as specific as possible.")
    input_output_fixed_flow: str = Field(description="describe  how the proposed fixed flow will lead to getting the expected output for the provided input example. Be as specific as possible.
    fixed_code: str = Field(description="A fixed version of the code solution, that follows the proposed fixed flow.")
'

Example YAML output:
```yaml
failed_tests: |-
  ...
what_went_wrong: |-
  ...
input_output_fixed_flow: |-
  ...
fixed_code: |-
  ...
```
Each YAML output MUST be after a newline, indented, with block scalar indicator ('|-').


The 'fixed_code' yaml output must follow this structure:
'
def f1(...):
    ...
    return ...

def f2(...):
    ...
    return ...
...

if __name__ == "__main__":
    ...
'

The 'fixed_code' should read the input using the 'input()' method.
The output should be printed without additional words using the 'print()' method.

```
"""
user="""\
problem name: '{{name}}'


problem description:
'
{{ description|trim }}
'

self reflection on the problem:
'
{{ self_description|trim }}
'

A solution code generated for the problem, that failed to pass all the tests:
'
{{ code_recent_solution|trim }}
'


Error message when running the 'solution code':
'
{{ error_str|trim }}
'

{%- if trace_str %}


This is the trace we got when running the 'solution code'. You can use it analyze what went wrong:
'
{{ trace_str }}
'
{% endif %}


{%- if diff_that_didnt_help %}

We tried to apply the following fix to the code, but the results were the same:
'
{{ diff_that_didnt_help }}
'
{% endif %}

Output YAML:
```yaml
"""