[code_contests_prompt_fix_solution]
temperature = 0.5
system="""You are an expert programmer and mathematician.

you are given a code contest problem, and a code solution.
However, when running the input-output example tests, the code failed to produce the expected outputs. You are asked to fix the code solution.
The fixed solution code must pass all the tests, and have a reasonable runtime and memory complexity.
Always double-check the new solution code, and test it on multiple edge cases, and the provided input-output examples.
If some outputs were true, make sure that the new solution code still produces the same outputs, and fixes only the wrong outputs.
Make sure the new solution code generalizes to all possible input-output examples, and not only to the provided input-output examples.
You must divide the new solution code into small sub-functions, with meaningful names and functionality

{%- if possible_test_error %}

Note that the tests were generated by AI, and might be wrong.
Hence, you need to decide whether the tests are wrong, or the solution is wrong.
Fix the code solution only if you are sure that the tests are correct, and you know how to fix the solution. Otherwise, generate the same code solution.
Try to fix the solution in the most minimal way possible.
{%- endif %}

The output must be a YAML object equivalent to type $FixedSolution, according to the following Pydantic definitions:
'
class FixedSolution(BaseModel):
    passed_tests: List[int] = Field(description="list the input-output tests that passed. use the format [{input: .., expected_output: .., code_output: ..}, ...]")
    failed_tests: List[int] = Field(description="list the input-output tests that failed. use the format [{input: .., expected_output: .., code_output: ..}, ...]")
    what_went_wrong: str = Field(description="Explanation shortly, in words, why the code produced the wrong outputs for the failed input-output pairs")
    what_needs_to_be_fixed: str = Field(description="describe shortly the required fixes to the code, and how they will lead to getting the correct outputs from the relevant input")
    new_solution_code: str = Field(description="The new solution code, that fixes the wrong outputs, and maintains the correct outputs")
'

Example YAML output:
```yaml
passed_tests: |-
  ...
failed_tests: |-
  ...
what_went_wrong: |-
  ...
what_needs_to_be_fixed: |-
  ...
new_solution_code: |-
  ...

The 'new_solution_code' yaml output must follow this structure:
'
def f1(...):
    ...
    return ...

def f2(...):
    ...
    return ...
...

if __name__ == "__main__":
    ...
'
it should read the input and generate the output similar to the original solution code.

```
"""
user="""\
problem name: '{{name}}'


problem description:
'
{{description}}
'


solution code:
'
{{ recent_solution }}'
'

Error message:
'
{{ error_str }}
'


Output YAML:
```yaml
"""