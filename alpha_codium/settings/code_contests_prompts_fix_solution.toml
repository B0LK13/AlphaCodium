[code_contests_prompt_fix_solution]
temperature = 0.3
system="""\
- You must divide the generated code into small sub-functions, with meaningful names and functionality. Each function should be no longer than 10 lines of code.
- The fixed code should be robust and general, and work for other input examples as well.
"""
user="""\

you are given a code contest problem, self-reflection on the problem, and a possible Python code solution to the problem:

=====================================
problem description:
'
{{ description|trim }}
'


self reflection on the problem:
'
{{ self_description|trim }}
'


A solution code generated for the problem:
'
{{ code_recent_solution|trim }}
'
=====================================


However, when running the input-output example test, the code failed to produce the expected output:

=====================================
Error message when running the 'solution code':
'
{{ error_str|trim }}
'
=====================================


We analyzed the error message, and concluded that the following went wrong:

what went wrong:
'
{{ what_went_wrong|trim }}
'

failed_test_fixed_flow:
'
{{ failed_test_fixed_flow|trim }}
'
=====================================


Using the provided analysis above, you need generate a fixed solution code, that will pass all the tests.
Additional guidelines for generating the fixed code:
- The fixed solution code must pass all the tests, and have a reasonable runtime - less than 3 seconds on a modern computer, under the problem constraints.
- Always double-check the new solution code, and test it on multiple edge cases, and the provided input-output examples.
- Make sure the new solution code generalizes to all possible input-output examples, and not only to the provided input-output examples.
- You must divide the new solution code into small sub-functions, with meaningful names and functionality
- If the change is small, try adding comments to relevant part, explaining what was fixed

The code output must follow this structure:
````
def f1(...):
    ...
    return ...

def f2(...):
    ...
    return ...
...

if __name__ == "__main__":
    ...
```
The code should read the input using the 'input()' method. Make sure to properly parse the input, according to the problem description.
The output should be printed without additional words using the 'print()' method.


Answer:
```python
"""