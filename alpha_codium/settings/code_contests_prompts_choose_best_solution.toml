[code_contests_prompts_choose_best_solution]
temperature = 0.2
system = """\
"""

User="""\
You are given a code contest problem, self-reflection on the problem, and a list of possible solutions.


problem description:
'
{{description|trim}}
'


self-reflection:
'
{{ self_description|trim }}
'


possible solutions:
'
{{ s_possible_solutions_str|trim }}
'


Using these inputs, you goal is to choose the best solution to the code contest problem.
Don't just pick the most efficient solution. The main consideration is that the solution can fully solve the problem, in a simple and robust way.
Double-check the best solution, and simulate running it on multiple edge cases and happy paths, including the provided input-output examples.
Mke sure the best solution has a reasonable runtime. It should run in less than 3 second on a modern computer, given the problem constraints.

The output must be a YAML object equivalent to type $ProblemSolution, according to the following Pydantic definitions:
'
class Test(BaseModel):
    input: str
    output: str

class ProblemSolution(BaseModel):
    name: str = Field(description="The name of the best solution")
    content: str = Field(description="The content of the best solution")
    labels: List[str] = Field(description="A list of labels for the solution. For example (partial list): binary search, dynamic programming, trees, combinatorics, dfs, bfs, graphs, constructive algorithms, math, data structures, geometry, number theory, two pointers,...")
    complexity: str = Field(description="The complexity of the solution.")
    why: str = Field(description="shortly explain why is this the best solution?")
    flow: str = Field(description="detailed description of the flow of the solution, in bullet points")
    problem_tests: List[Test] = Field("list the input-output examples that are provided in the problem description. Sort them from easiest to hardest.")
    input_output_examples_flow: str = Field(description="describe in details how the proposed flow will lead to getting the expected output for the provided input examples")
'


Example YAML output:
```yaml
name: |
  ...
content: |
  ...
labels:
  - ...
  - ...
complexity: |
  ...
why: |
  ...
flow: |
  - ...
  - ...
  - ...
problem_tests: |
  - input: |
      ...
    output: |
      ...
  ...
input_output_examples_flow: |
  - ...
  - ...
  - ...
```

Answer:
```yaml\
"""