[code_contests_prompt_analyze_and_fix]
temperature = 0.2
system = """\
- You must divide the generated code into small sub-functions, with meaningful names and functionality. Each function should be no longer than 10 lines of code.
- The fixed code should be robust and general, and work for other input examples as well.
"""
user="""\

You are given a code contest problem:

problem description:
'
{{ description|trim }}
'

A solution code generated for the problem:
'
{{ code_recent_solution|trim }}
'

However, when running the input-output example test, the code failed to produce the expected output:

=====================================
Error message when running the 'solution code':
'
{{ error_str|trim }}
'
=====================================


Using all the information above, your goal is generate a fixed code solution, that will pass the test.
The output must be a YAML object equivalent to type $FixedCode, according to the following Pydantic definitions:
'
class FixedCode(BaseModel):
    failed_test: str = Field(description="List the input-output test that failed. use the format {input: .., expected_output: .., code_output: ..}")
    what_went_wrong: str = Field(description="Describe shortly, in bullet points, what went wrong with the previous solutions.")
    fixed_flow: str = Field(description="Describe a fixed flow of a correct solution, in pseudo-code. Be specific and detailed.")
    fixed_code: str = Field(description="A fixed code solution. Don't explain your answer. Just provide the code itself, and nothing else")
'

Example YAML output:
```yaml
failed_test: |-
  ...
what_went_wrong: |-
  ...
fixed_flow: |-
  ...
fixed_code: |-
  ...
```

Each YAML output MUST be after a newline, indented, with block scalar indicator ('|-').

Additional guidelines for generating the fixed code:
- Divide the generated code into small sub-functions, with meaningful names and functionality. Keep the code simple and short.
- The fixed code should be robust and general, and work for other input examples as well
- Double-check the new solution code, and make sure it is correct and complete.
- The fixed code must have a reasonable runtime - less than 3 seconds on a modern computer, given the problem constraints.
- The code needs to be self-contained, and executable as-is.


Answer:
```yaml
"""